{
  "_args": [
    [
      {
        "raw": "nanoid@^1.0.1",
        "scope": null,
        "escapedName": "nanoid",
        "name": "nanoid",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/Volumes/ARCHIVOS/Dropbox/Fruticola de Colombia/Desarrollos/ReactNative/Proyectos/Redux/node_modules/json-server"
    ]
  ],
  "_from": "nanoid@>=1.0.1 <2.0.0",
  "_id": "nanoid@1.0.1",
  "_inCache": true,
  "_location": "/nanoid",
  "_nodeVersion": "8.8.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/nanoid-1.0.1.tgz_1509376525439_0.9277203739620745"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nanoid@^1.0.1",
    "scope": null,
    "escapedName": "nanoid",
    "name": "nanoid",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/json-server"
  ],
  "_resolved": "https://registry.npmjs.org/nanoid/-/nanoid-1.0.1.tgz",
  "_shasum": "58a8e0577d9db07ae4f231a3afa59af94e4fc439",
  "_shrinkwrap": null,
  "_spec": "nanoid@^1.0.1",
  "_where": "/Volumes/ARCHIVOS/Dropbox/Fruticola de Colombia/Desarrollos/ReactNative/Proyectos/Redux/node_modules/json-server",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "browser": {
    "./random.js": "./random-browser.js"
  },
  "bugs": {
    "url": "https://github.com/ai/nanoid/issues"
  },
  "dependencies": {},
  "description": "A tiny (179 bytes), secure URL-friendly unique string ID generator",
  "devDependencies": {
    "benchmark": "^2.1.4",
    "chalk": "^2.3.0",
    "docdash": "^0.4.0",
    "eslint": "^4.10.0",
    "eslint-config-logux": "^16.2.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-plugin-es5": "^1.1.0",
    "eslint-plugin-import": "^2.8.0",
    "eslint-plugin-jest": "^21.2.0",
    "eslint-plugin-node": "^5.2.1",
    "eslint-plugin-promise": "^3.6.0",
    "eslint-plugin-security": "^1.4.0",
    "eslint-plugin-standard": "^3.0.1",
    "html-webpack-plugin": "^2.30.1",
    "jest": "^21.2.1",
    "jsdoc": "^3.5.5",
    "lint-staged": "^4.3.0",
    "microtime": "^2.1.6",
    "pre-commit": "^1.2.2",
    "rimraf": "^2.6.2",
    "shortid": "^2.2.8",
    "size-limit": "^0.12.0",
    "uuid": "^3.1.0",
    "webpack-dev-server": "^2.9.3",
    "yaspeller-ci": "^0.7.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-BXapDjcA0QjUPLBqcC5EcvwB8LMOY7zXf3UqDGp93R73PoMOfipmRVxpTogAhtqViE/pJzP9bS+jGK31rzkE2w==",
    "shasum": "58a8e0577d9db07ae4f231a3afa59af94e4fc439",
    "tarball": "https://registry.npmjs.org/nanoid/-/nanoid-1.0.1.tgz"
  },
  "eslintConfig": {
    "extends": "eslint-config-logux/browser",
    "rules": {
      "yoda": "off"
    }
  },
  "gitHead": "80cf5452f427b7e791f31ee6b84818f764826d8e",
  "homepage": "https://github.com/ai/nanoid#readme",
  "jest": {
    "coverageThreshold": {
      "global": {
        "statements": 100
      }
    }
  },
  "keywords": [
    "uuid",
    "random",
    "id",
    "url"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.md": "yaspeller-ci",
    "*.js": "eslint"
  },
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    }
  ],
  "name": "nanoid",
  "optionalDependencies": {},
  "pre-commit": [
    "lint-staged"
  ],
  "readme": "# Nano ID\n\nA tiny, secure, URL-friendly, unique string ID generator for JavaScript.\n\n```js\nvar nanoid = require('nanoid')\nmodel.id = nanoid() //=> \"Uakgb_J5m9g~0JDMbcJqLJ\"\n```\n\n**Safe.** It uses cryptographically strong random APIs\nand guarantees a proper distribution of symbols.\n\n**Small.** Only 179 bytes (minified and gzipped). No dependencies.\nIt uses [Size Limit] to control size.\n\n**Compact.** It uses a larger alphabet than UUID (`A-Za-z0-9_~`)\nand has a similar number of unique IDs in just 21 symbols instead of 36.\n\nThe generator supports Node.js and [all browsers] starting from IE 11.\n\n[all browsers]: http://caniuse.com/#feat=getrandomvalues\n[Size Limit]:   https://github.com/ai/size-limit\n\n<a href=\"https://evilmartians.com/?utm_source=nanoid\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n## Security\n\n*See a good article about random generators theory:\n[Secure random values (in Node.js)]*\n\n### Unpredictability\n\nInstead of using the unsafe `Math.random()`, Nano ID uses the `crypto` module\nin Node.js and the Web Crypto API in browsers.\n\n### Uniformity\n\n`random % alphabet` is a popular mistake to make when coding an ID generator.\nThe spread will not be even; there will be a lower chance for some symbols\nto appear compared to others—so it will reduce the number of tries\nwhen brute-forcing.\n\nNano ID uses a [better algorithm] and is tested for uniformity:\n\n<img src=\"distribution.png\" alt=\"Nano ID uniformity\" width=\"340\" height=\"135\">\n\n[Secure random values (in Node.js)]: https://gist.github.com/joepie91/7105003c3b26e65efcea63f3db82dfba\n[better algorithm]: https://github.com/ai/nanoid/blob/master/format.js\n\n## Comparison with UUID\n\nNano ID is quite comparable to UUID v4 (random-based).\nIt has a similar number of random bits in the ID\n(126 in Nano ID and 122 in UUID), so it has a similar collision probability:\n\n> For there to be a one in a billion chance of duplication,\n> 103 trillion version 4 IDs must be generated.\n\nThere are two main differences between Nano ID and UUID v4:\n\n1. Nano ID uses a bigger alphabet, so a similar number of random bits\n   are packed in just 21 symbols instead of 36.\n2. Nano ID code is less than half the size of the `uuid/v4` package:\n   179 bytes instead of 435.\n\n## Benchmark\n\n```\n$ ./benchmark\nnanoid          375,840 ops/sec\nnanoid/generate 268,747 ops/sec\nuuid/v4         374,767 ops/sec\nshortid          41,260 ops/sec\n```\n\n\n## Usage\n\n### Normal\n\nThe main module uses URL-friendly symbols (`A-Za-z0-9_~`) and returns an ID\nwith 21 characters (to have a collision probability similar to UUID v4).\n\n```js\nvar nanoid = require('nanoid')\nmodel.id = nanoid() //=> \"Uakgb_J5m9g~0JDMbcJqLJ\"\n```\n\nSymbols `-,.()` are not encoded in the URL. If used at the end of a link\nthey could be identified as a punctuation symbol.\n\nIf you want to reduce ID length (and increase collisions probability),\nyou can pass the length as an argument:\n\n```js\nnanoid(10) //=> \"IRFa~VaY2b\"\n```\n\n### Custom Alphabet or Length\n\nIf you want to change the ID's alphabet or length\nyou can use the low-level `generate` module.\n\n```js\nvar generate = require('nanoid/generate')\nmodel.id = generate('1234567890abcdef', 10) //=> \"4f90d13a42\"\n```\n\nAlphabet must contain 256 symbols or less.\nOtherwise, the generator will not be secure.\n\n\n### Custom Random Bytes Generator\n\nYou can replace the default safe random generator using the `format` module.\nFor instance, to use a seed-based generator.\n\n```js\nvar format = require('nanoid/format')\n\nfunction random (size) {\n  var result = []\n  for (var i = 0; i < size; i++) result.push(randomByte())\n  return result\n}\n\nformat(random, \"abcdef\", 10) //=> \"fbaefaadeb\"\n```\n\n`random` callback must accept the array size and return an array\nwith random numbers.\n\nIf you want to use the same URL-friendly symbols with `format`,\nyou can get the default alphabet from the `url` module:\n\n```js\nvar url = require('nanoid/url')\nformat(random, url, 10) //=> \"93ce_Ltuub\"\n```\n\n\n## Other Programming Languages\n\n* [Go](https://github.com/matoous/go-nanoid)\n* [Java](https://github.com/aventrix/jnanoid)\n* [PHP](https://github.com/hidehalo/nanoid-php)\n* [Python](https://github.com/puyuan/py-nanoid)\n* [Ruby](https://github.com/radeno/nanoid.rb)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ai/nanoid.git"
  },
  "scripts": {
    "clean": "rimraf docs/ coverage/",
    "demo": "webpack-dev-server --config test/demo/webpack.config",
    "docs": "jsdoc --configure .jsdocrc *.js",
    "lint": "eslint *.js test/*.js",
    "lint-staged": "lint-staged",
    "spellcheck": "yarn docs && yaspeller-ci *.md docs/*.html",
    "test": "jest --coverage && yarn lint && size-limit && yarn spellcheck"
  },
  "size-limit": [
    {
      "path": "index.js",
      "limit": "176 B"
    },
    {
      "path": "generate.js",
      "limit": "184 B"
    }
  ],
  "version": "1.0.1"
}
